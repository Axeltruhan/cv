import { useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import PersonalInfoForm from "@/components/PersonalInfoForm";
import ExperienceForm from "@/components/ExperienceForm";
import EducationForm from "@/components/EducationForm";
import SkillsForm from "@/components/SkillsForm";
import LanguagesForm from "@/components/LanguagesForm";
import DrivingInfoForm from "@/components/DrivingInfoForm";
import CVPreview from "@/components/CVPreview";
import { useToast } from "@/hooks/use-toast";
import { PersonalInfo, Experience, Education, Skill, Language } from "@shared/schema";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";
import { v4 as uuidv4 } from "uuid";

const Home = () => {
  const { toast } = useToast();
  
  // Template selezionato (classic, modern, professional)
  const [selectedTemplate, setSelectedTemplate] = useState<string>("classic");
  
  const [personalInfo, setPersonalInfo] = useState<PersonalInfo>({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    address: "",
    description: "",
    photo: "",
    drivingLicense: "",
    hasCar: false,
    languages: []
  });
  
  const [experiences, setExperiences] = useState<Experience[]>([]);
  const [education, setEducation] = useState<Education[]>([]);
  const [skills, setSkills] = useState<Skill[]>([]);
  
  const addExperience = () => {
    setExperiences([
      ...experiences,
      {
        id: uuidv4(),
        company: "",
        position: "",
        startDate: "",
        endDate: "",
        current: false,
        description: ""
      }
    ]);
  };
  
  const updateExperience = (updatedExperience: Experience) => {
    setExperiences(experiences.map(exp => 
      exp.id === updatedExperience.id ? updatedExperience : exp
    ));
  };
  
  const removeExperience = (id: string) => {
    setExperiences(experiences.filter(exp => exp.id !== id));
  };
  
  const addEducation = () => {
    setEducation([
      ...education,
      {
        id: uuidv4(),
        institution: "",
        degree: "",
        startDate: "",
        endDate: "",
        current: false,
        description: ""
      }
    ]);
  };
  
  const updateEducation = (updatedEducation: Education) => {
    setEducation(education.map(edu => 
      edu.id === updatedEducation.id ? updatedEducation : edu
    ));
  };
  
  const removeEducation = (id: string) => {
    setEducation(education.filter(edu => edu.id !== id));
  };
  
  const addSkill = () => {
    setSkills([
      ...skills,
      {
        id: uuidv4(),
        name: "",
        level: 3,
        category: ""
      }
    ]);
  };
  
  const updateSkill = (updatedSkill: Skill) => {
    setSkills(skills.map(skill => 
      skill.id === updatedSkill.id ? updatedSkill : skill
    ));
  };
  
  const removeSkill = (id: string) => {
    setSkills(skills.filter(skill => skill.id !== id));
  };
  
  const addLanguage = () => {
    setPersonalInfo({
      ...personalInfo,
      languages: [
        ...personalInfo.languages,
        {
          id: uuidv4(),
          name: "",
          level: "B1"
        }
      ]
    });
  };

  const updateLanguage = (updatedLanguage: Language) => {
    setPersonalInfo({
      ...personalInfo,
      languages: personalInfo.languages.map(lang => 
        lang.id === updatedLanguage.id ? updatedLanguage : lang
      )
    });
  };
  
  const removeLanguage = (id: string) => {
    setPersonalInfo({
      ...personalInfo,
      languages: personalInfo.languages.filter(lang => lang.id !== id)
    });
  };
  
  const downloadCV = async () => {
    // Ottieni il contenitore principale dell'anteprima CV
    const cvContainer = document.getElementById('cv-preview');
    
    if (!cvContainer || cvContainer.children.length === 0) {
      toast({
        title: "Errore",
        description: "Impossibile generare il PDF. Elemento CV non trovato.",
        variant: "destructive"
      });
      return;
    }
    
    // Prendi il template corrente (primo figlio di cv-preview)
    const cvElement = cvContainer.children[0] as HTMLElement;
    
    // Controlla che ci siano dati da includere nel CV
    if (!personalInfo.firstName) {
      toast({
        title: "Dati incompleti",
        description: "Inserisci almeno il tuo nome per generare il CV.",
        variant: "destructive"
      });
      return;
    }
    
    // Toast per indicare che la generazione è in corso
    toast({
      title: "Preparazione",
      description: "Generazione del PDF in corso...",
    });
    
    try {
      // Dimensioni della pagina A4
      const pageWidth = 210; // mm
      const pageHeight = 297; // mm
      
      // Imposta margini
      const marginX = 8; // mm
      const marginY = 8; // mm
      
      // Crea il PDF usando jsPDF
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
        compress: true
      });
      
      // Approccio semplificato: renderizziamo l'intero template come un'unica immagine
      
      // Crea un contenitore temporaneo
      const tempContainer = document.createElement('div');
      tempContainer.style.position = 'absolute';
      tempContainer.style.left = '-9999px';
      tempContainer.style.top = '0';
      tempContainer.style.width = `${pageWidth - (marginX * 2)}mm`;
      tempContainer.style.backgroundColor = 'white';
      tempContainer.style.padding = '0';
      tempContainer.style.margin = '0';
      tempContainer.style.boxSizing = 'border-box';
      document.body.appendChild(tempContainer);
      
      // Clona il contenuto del CV nel contenitore temporaneo
      const cvClone = cvElement.cloneNode(true) as HTMLElement;
      cvClone.style.padding = '0';
      cvClone.style.margin = '0';
      cvClone.style.border = 'none';
      tempContainer.appendChild(cvClone);
      
      // Genera il canvas dal contenitore temporaneo
      const canvas = await html2canvas(tempContainer, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: "#ffffff",
        logging: false,
        onclone: (clonedDoc) => {
          // Assicurati che lo stile venga mantenuto nella clonazione
          const clonedElement = clonedDoc.querySelector('#cv-preview')?.children[0] as HTMLElement;
          if (clonedElement) {
            clonedElement.style.width = '100%';
            clonedElement.style.padding = '4mm';
            clonedElement.style.margin = '0';
          }
        }
      });
      
      // Calcola la larghezza e l'altezza dell'immagine
      const imgWidth = pageWidth - (marginX * 2);
      let imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      // Se l'altezza dell'immagine supera la pagina, devi dividerla in più pagine
      const maxHeight = pageHeight - (marginY * 2);
      
      if (imgHeight <= maxHeight) {
        // Se l'immagine entra in una pagina, aggiungila al PDF
        pdf.addImage(
          canvas.toDataURL('image/jpeg', 0.95), 
          'JPEG',
          marginX, marginY,
          imgWidth, imgHeight
        );
      } else {
        // Se l'immagine è più grande della pagina, dividila in più pagine
        let currentPosition = 0;
        
        while (currentPosition < canvas.height) {
          // Calcola l'altezza della sezione corrente
          const canvasSectionHeight = Math.min(
            canvas.height - currentPosition,
            (maxHeight / imgHeight) * canvas.height
          );
          
          // Calcola l'altezza in millimetri della sezione corrente
          const pdfSectionHeight = (canvasSectionHeight * imgHeight) / canvas.height;
          
          // Crea un canvas temporaneo per questa sezione
          const tempCanvas = document.createElement('canvas');
          tempCanvas.width = canvas.width;
          tempCanvas.height = canvasSectionHeight;
          
          // Disegna la sezione corrente sul canvas temporaneo
          const ctx = tempCanvas.getContext('2d');
          if (ctx) {
            ctx.drawImage(
              canvas,
              0, currentPosition,
              canvas.width, canvasSectionHeight,
              0, 0,
              canvas.width, canvasSectionHeight
            );
            
            // Aggiungi l'immagine della sezione al PDF
            pdf.addImage(
              tempCanvas.toDataURL('image/jpeg', 0.95),
              'JPEG',
              marginX, marginY,
              imgWidth, pdfSectionHeight
            );
          }
          
          // Passa alla sezione successiva
          currentPosition += canvasSectionHeight;
          
          // Aggiungi una nuova pagina se ci sono altre sezioni da aggiungere
          if (currentPosition < canvas.height) {
            pdf.addPage();
          }
        }
      }
      
      // Salva il PDF
      pdf.save(`CV_${personalInfo.firstName}_${personalInfo.lastName || 'CV'}.pdf`);
      
      // Rimuovi l'elemento temporaneo
      document.body.removeChild(tempContainer);
      
      // Mostra messaggio di completamento
      toast({
        title: "Completato",
        description: "Il tuo CV è stato scaricato correttamente.",
      });
    } catch (error) {
      console.error("PDF generation error:", error);
      toast({
        title: "Errore",
        description: "Si è verificato un errore durante la generazione del PDF.",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header moderno con effetto vetro */}
      <header className="glass-container backdrop-blur-md sticky top-0 z-50 border-b border-white/20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-5 flex flex-col sm:flex-row justify-between items-center gap-4">
          <h1 className="text-2xl sm:text-3xl font-bold flex items-center">
            <div className="relative mr-3 h-10 w-10 flex-shrink-0">
              <div className="absolute inset-0 rounded-xl bg-gradient-to-tr from-indigo-500 to-purple-600 blur-sm opacity-75 animate-pulse"></div>
              <div className="relative z-10 h-full w-full flex items-center justify-center rounded-xl bg-white">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
            </div>
            <span className="bg-gradient-to-r from-indigo-600 to-purple-600 text-transparent bg-clip-text">
              Generatore Curriculum Interattivo
            </span>
          </h1>
          <Button 
            onClick={downloadCV} 
            className="btn-3d relative overflow-hidden bg-gradient-to-r from-indigo-500 to-purple-600 text-white border-0 shadow-lg group px-6"
          >
            <span className="absolute inset-0 w-full h-full bg-gradient-to-br from-white/10 to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></span>
            <Download className="mr-2 h-4 w-4" /> Scarica CV
          </Button>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Column - Forms */}
          <div className="space-y-6">
            <Tabs defaultValue="info" className="w-full">
              {/* Layout responsivo per le schede: 2 righe su mobile, 3x2 su tablet, 6x1 su desktop */}
              <div className="relative mb-6">
                <div className="absolute inset-0 bg-gradient-to-r from-indigo-300/20 to-purple-300/20 rounded-xl blur-lg"></div>
                <TabsList className="flex flex-wrap w-full relative z-10 glass-container bg-white/70 rounded-xl backdrop-blur-sm border border-white/40 shadow-lg">
                {/* Prima riga - Schede più importanti */}
                <TabsTrigger value="info" className="flex-1 min-w-[33%] sm:min-w-[16.666%] data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-500 data-[state=active]:text-white transition-all duration-300">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  <span className="text-xs sm:text-sm truncate">Info</span>
                </TabsTrigger>
                <TabsTrigger value="experience" className="flex-1 min-w-[33%] sm:min-w-[16.666%] data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-500 data-[state=active]:text-white transition-all duration-300">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  <span className="text-xs sm:text-sm truncate">Esperienze</span>
                </TabsTrigger>
                <TabsTrigger value="education" className="flex-1 min-w-[33%] sm:min-w-[16.666%] data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-500 data-[state=active]:text-white transition-all duration-300">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path d="M12 14l9-5-9-5-9 5 9 5z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998a12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222" />
                  </svg>
                  <span className="text-xs sm:text-sm truncate">Formazione</span>
                </TabsTrigger>
                {/* Seconda riga - Schede meno frequenti */}
                <TabsTrigger value="skills" className="flex-1 min-w-[33%] sm:min-w-[16.666%] data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-500 data-[state=active]:text-white transition-all duration-300">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  <span className="text-xs sm:text-sm truncate">Competenze</span>
                </TabsTrigger>
                <TabsTrigger value="languages" className="flex-1 min-w-[33%] sm:min-w-[16.666%] data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-500 data-[state=active]:text-white transition-all duration-300">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
                  </svg>
                  <span className="text-xs sm:text-sm truncate">Lingue</span>
                </TabsTrigger>
                <TabsTrigger value="driving" className="flex-1 min-w-[33%] sm:min-w-[16.666%] data-[state=active]:bg-gradient-to-r data-[state=active]:from-indigo-500 data-[state=active]:to-purple-500 data-[state=active]:text-white transition-all duration-300">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                  </svg>
                  <span className="text-xs sm:text-sm truncate">Patente</span>
                </TabsTrigger>
              </TabsList>
              </div>
              
              <TabsContent value="info">
                <PersonalInfoForm 
                  personalInfo={personalInfo} 
                  setPersonalInfo={setPersonalInfo} 
                />
              </TabsContent>
              
              <TabsContent value="experience">
                <ExperienceForm 
                  experiences={experiences}
                  addExperience={addExperience}
                  updateExperience={updateExperience}
                  removeExperience={removeExperience}
                />
              </TabsContent>
              
              <TabsContent value="education">
                <EducationForm 
                  education={education}
                  addEducation={addEducation}
                  updateEducation={updateEducation}
                  removeEducation={removeEducation}
                />
              </TabsContent>
              
              <TabsContent value="skills">
                <SkillsForm 
                  skills={skills}
                  experiences={experiences}
                  addSkill={addSkill}
                  updateSkill={updateSkill}
                  removeSkill={removeSkill}
                />
              </TabsContent>
              
              <TabsContent value="languages">
                <LanguagesForm 
                  languages={personalInfo.languages}
                  addLanguage={addLanguage}
                  updateLanguage={updateLanguage}
                  removeLanguage={removeLanguage}
                />
              </TabsContent>
              
              <TabsContent value="driving">
                <DrivingInfoForm 
                  personalInfo={personalInfo}
                  setPersonalInfo={setPersonalInfo}
                />
              </TabsContent>
            </Tabs>
          </div>
          
          {/* Right Column - CV Preview with Template Selector */}
          <div className="lg:sticky lg:top-8 self-start">
            <div className="bg-white p-4 mb-4 rounded-lg border border-gray-200 shadow-sm">
              <h3 className="text-sm font-medium mb-2 text-gray-700">Seleziona Template</h3>
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                <button 
                  onClick={() => setSelectedTemplate("classic")}
                  className={`p-2 text-xs font-medium rounded border transition-colors ${
                    selectedTemplate === "classic" 
                      ? "bg-primary text-white border-primary" 
                      : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
                  }`}
                >
                  Classico
                </button>
                <button 
                  onClick={() => setSelectedTemplate("modern")}
                  className={`p-2 text-xs font-medium rounded border transition-colors ${
                    selectedTemplate === "modern" 
                      ? "bg-primary text-white border-primary" 
                      : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
                  }`}
                >
                  Moderno
                </button>
                <button 
                  onClick={() => setSelectedTemplate("professional")}
                  className={`p-2 text-xs font-medium rounded border transition-colors ${
                    selectedTemplate === "professional" 
                      ? "bg-primary text-white border-primary" 
                      : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
                  }`}
                >
                  Professionale
                </button>
                <button 
                  onClick={() => setSelectedTemplate("modern3d")}
                  className={`p-2 text-xs font-medium rounded border transition-colors bg-gradient-to-r ${
                    selectedTemplate === "modern3d" 
                      ? "from-purple-500 to-indigo-600 text-white border-indigo-600" 
                      : "from-purple-100 to-indigo-100 text-indigo-700 border-indigo-200 hover:from-purple-200 hover:to-indigo-200"
                  }`}
                >
                  <span className="drop-shadow-sm">3D Moderno</span>
                </button>
              </div>
            </div>
            <CVPreview
              personalInfo={personalInfo}
              experiences={experiences}
              education={education}
              skills={skills}
              template={selectedTemplate}
            />
          </div>
        </div>
      </main>
      
      <footer className="bg-white border-t border-gray-200 mt-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <p className="text-center text-gray-500 text-sm">
            © {new Date().getFullYear()} Generatore Curriculum Interattivo - Creato con 
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline mx-1 text-red-500" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
            </svg>
          </p>
        </div>
      </footer>
    </div>
  );
};

export default Home;